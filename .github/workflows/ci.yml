name: Hermes Pipeline
on: 
  push: 
    branches: 
      - main
  pull_request: 
    branches: 
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-mono
  CLUSTER_NAME: lab
  KUBE_NAMESPACE: hermes
  CODEQL_ENABLED: true
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  build-container:
    name: "Build Container"
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      version: ${{ steps.meta.outputs.version }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # for multi arch container builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Setup Docker buildx
        timeout-minutes: 4
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        timeout-minutes: 5
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        timeout-minutes: 5
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Build Docker image
        id: build
        timeout-minutes: 25
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Scan image
        id: scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ steps.meta.outputs.tags }}
          fail-build: false
          acs-report-enable: true
      - name: Upload Anchore scan SARIF report
        if: ${{ env.CODEQL_ENABLED }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Export Container TAR
        timeout-minutes: 4
        run: |
          set -e
          set -x
          mkdir -p /tmp/artifacts
          docker save ${{ steps.meta.outputs.tags }} -o /tmp/artifacts/image.tar
          gzip -c /tmp/artifacts/image.tar > /tmp/artifacts/image.tar.gz
      - name: Anti Virus Scan
        timeout-minutes: 10
        run: |
          sudo apt-get install clamav clamav-daemon -y
          sudo systemctl stop clamav-freshclam
          sudo freshclam
          clamscan --max-filesize=500M --max-scansize=500M /tmp/artifacts/image.tar.gz
      - name: Push image
        if: github.event_name != 'pull_request'
        id: push
        timeout-minutes: 25
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          image: ${{ steps.meta.outputs.tags }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Upload Container TAR
        if: ${{ github.event_name == 'pull_request' }}
        timeout-minutes: 4
        uses: actions/upload-artifact@v2
        with:
          path: /tmp/artifacts/image.tar.gz
          name: image.tar.gz
          retention-days: 1
          if-no-files-found: error
  helm-lint:
    name: Lint Helm Chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Lint Helm Chart
        run: npm run helm:lint
  kube-scan:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create single template for scanning
        working-directory: helm/hermes
        run: |
          helm template . > infra.yaml
      - name: actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: infra-template-render
          path: helm/hermes/infra.yaml
      - name: Run kubesec scanner
        uses: controlplaneio/kubesec-action@43d0ddff5ffee89a6bb9f29b64cd865411137b14
        with:
          input: helm/hermes/infra.yaml # specify configuration file to scan here
          format: template
          template: /templates/sarif.tpl
          output: kubesec-results.sarif
          exit-code: "0"
      - name: actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: kubesec-analysis
          path: kubesec-results.sarif
      - name: Upload Kubesec scan results to GitHub Security tab
        if: ${{ env.CODEQL_ENABLED }}
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: kubesec-results.sarif
  test-deploy:
    name: "Test Deploy"
    needs: [ build-container, helm-lint, kube-scan, analyze ]
    runs-on: ubuntu-latest
    env: 
      HELM_NAMESPACE: "hermes"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download Container TAR
      if: ${{ github.event_name == 'pull_request' }}
      timeout-minutes: 4
      uses: actions/download-artifact@v1
      with:
        path: /tmp/artifacts/
        name: image.tar.gz
    - name: Import Container TAR
      timeout-minutes: 4
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        set -e
        set -x
        mkdir -p /tmp/artifacts
        gzip --stdout --decompress /tmp/artifacts/image.tar.gz > /tmp/artifacts/image.tar
        docker load -i /tmp/artifacts/image.tar
    - name: Create MicroK8S Cluster
      timeout-minutes: 15
      run: |
        sudo snap install microk8s --classic --channel=1.23/stable
        sudo microk8s enable dns storage registry rbac
        sudo microk8s status --wait-ready
        sudo microk8s kubectl rollout status deployment/hostpath-provisioner -n kube-system
    - name: Set Kube Config
      run: sg microk8s -c "microk8s config" > ~/.kube/config
    - name: Test Kube Access
      run: kubectl get nodes
    - name: Create Namespace
      run: npm run k8s:createNamespace --helm_namespace=$HELM_NAMESPACE
    - name: Create Pull Secret
      if: ${{ github.event_name != 'pull_request' }}
      run: npm run k8s:createPullSecret --helm_namespace=$HELM_NAMESPACE --registry_username=${{ github.actor }} --registry_password=${{ github.token }}
    - name: Side Load Image
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        docker -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-container.outputs.version }} localhost:32000/hermes-mono:latest
        docker push localhost:32000/hermes-mono:latest
    - name: Deploy
      timeout-minutes: 25
      run: npm run helm:deploy --helm_namespace=$HELM_NAMESPACE --helm_args="-f helm/hermes/envs/ci.yaml --set image.repository=localhost:32000/hermes-mono --set image.tag=latest --timeout 20m"
    - name: Test Deployment
      timeout-minutes: 5
      run: npm run helm:test
    - name: E2E Tests
      timeout-minutes: 10
      run: npm run test:e2e
    - name: Collect Info On Failure
      if: failure()
      run: |
        mkdir /tmp/microk8s-hermes/
        sudo snap logs microk8s > /tmp/microk8s-hermes/microk8s.log
        inspectTarball=$(sudo microk8s inspect | grep -Po "/var/snap/microk8s/.*\.tar\.gz")
        sudo cp $inspectTarball /tmp/microk8s-hermes/
    - name: Upload Info On Failure
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: test-deploy-logs
        path: /tmp/microk8s-hermes/
        retention-days: 1
  # TODO: Add publish helm chart and generate docs here
  deploy:
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    name: "Deploy to Lab"
    needs: [ test-deploy ]
    runs-on: ubuntu-latest
    environment: lab
    env: 
      HELM_NAMESPACE: "hermes"
    concurrency: 
      group: lab
      cancel-in-progress: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    # create connection to the cluster
    - name: Install Wireguard
      run: |
        sudo apt-get update
        sudo apt-get install -y wireguard-dkms
    - name: Create Wireguard Config
      run: |
        cat <<EOF >> ./wg0.conf
        [Interface]
        PrivateKey = ${{ secrets.WG_PRIVATE_KEY }}
        Address = ${{ secrets.WG_CLIENT_IP }}/32
        PostUp = ${{ secrets.WG_POST_UP }}
        PostDown = ${{ secrets.WG_POST_DOWN }}

        [Peer]
        PublicKey = ${{ secrets.WG_AP_PUBLIC_KEY }}
        AllowedIPs = ${{ secrets.WG_AP_ALLOWED_IPS}}
        Endpoint = ${{ secrets.WG_AP_ENDPOINT }}
        PersistentKeepalive = 25
        EOF
        sudo cp ./wg0.conf /etc/wireguard/wg0.conf
    - name: Connect To Wireguard
      timeout-minutes: 5
      run: |
        sudo systemctl enable wg-quick@wg0.service
        sudo systemctl start wg-quick@wg0.service
    - name: Check Wireguard Connection
      timeout-minutes: 5
      run: |
        ping -c 1 -W 1 ${{ secrets.WG_TEST_IP}}
        ping -c 1 -W 1 ${{ secrets.TEST_IP}}
    - name: Create Kubernetes Configuration
      timeout-minutes: 2
      run: |
        mkdir -p ~/.kube
        cat <<EOF >> ~/.kube/config
        apiVersion: v1
        clusters:
        - cluster:
            certificate-authority-data: ${{ secrets.K8S_API_CA }}
            server: ${{ secrets.LAB_K8S_SERVER}}
          name: lab
        contexts:
        - context:
            cluster: lab
            user: deployer
          name: deployer@lab
        current-context: deployer@lab
        kind: Config
        preferences: {}
        users:
        - name: deployer
          user:
            token: ${{ secrets.K8S_DEPLOYER_TOKEN }}
        EOF
        kubectl config use-context deployer@lab
    - name: Deploy To lab
      timeout-minutes: 35
      run: |
        npm run helm:deploy --helm_namespace=$HELM_NAMESPACE --helm_args="-f helm/hermes/envs/lab.yaml --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --set image.tag=${{ needs.build-container.outputs.version }} --timeout 30m"
    - name: Cleanup Wireguard
      timeout-minutes: 4
      if: always()
      run: |
        sudo systemctl stop wg-quick@wg0.service
        sudo shred -u /etc/wireguard/wg0.conf
        shred -u ./wg0.conf